Напишите класс StringView, хранящий "представление" (view) некоторого существующего объекта-строки (класса std::string). Сам объект строки не хранится в StringView, и если получится так, что строка будет уничтожена, то дальнейшее использование StringView на эту строку является Undefined Behavior.

StringView позволяет получить "представление" всей строки или ее части. Любая операция с представлением, например, модификация элемента, выполняется с исходной строкой. И наоборот, все изменения в исходной строке видимы во всех StringView этой строки.

Должны поддерживаться следующие конструкторы:

StringView(std::string &s, size_t begin = 0, size_t count = std::string::npos); — создать представление строки s, начинающееся с позиции begin и длины count.
StringView(const StringView &sv, size_t begin = 0, size_t count = std::string::npos); — создать представление строки из другого представления. begin и count — эти параметры отсчитываются относительно представления sv.
В конструкторах если параметр begin выходит за границу строки или строкового представления, представление строки должно быть пустым. Если count выходит за границу строки или строкового представления, правая граница устанавливается на текущую границу строки или строкового представления. Правая граница устанавливается в момент создания строкового представления. Если потом исходная строка расширится, строковое представление не изменится. Если строка уменьшится — undefined behavior.

Должны быть реализованы следующие методы:

length, size — получить длину представления.
операции индексации
std::string str(size_t begin = 0, size_t count = std::string::npos) const; — возвращает новую строку, являющуюся подстрокой исходной строки. Параметры begin и count относительны параметрам данного представления, а не исходной строки.
итераторы произвольного доступа
операции сравнения или операция <=>
Операция присваивания должна быть запрещена.